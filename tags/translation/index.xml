<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>translation on Leo Young&#39;s Blog</title>
    <link>https://leoyoung0.github.io/tags/translation/</link>
    <description>Recent content in translation on Leo Young&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 05 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://leoyoung0.github.io/tags/translation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Grin/Mimblewimble 较比特币之优势</title>
      <link>https://leoyoung0.github.io/posts/2020-1-05_grin4bitcoiners_zh-cn/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leoyoung0.github.io/posts/2020-1-05_grin4bitcoiners_zh-cn/</guid>
      <description>本篇是本作者翻译的 Grin 文档之一。简单比较 Bitcoin 之间的优劣。
  阅读其他语言版本：Korean、 English  隐私和可互换性 Grin 链上交易有三个隐私特性：
 没有交易地址； 没有交易金额； 两笔交易，一笔输入是另一笔输出，可以在一个区块中混合成为一笔交易，清除所有中间信息。  前两个特性意味着所有交易不可识别。只要直接进行交易，所有输入、输出数据都显示为随机数（专业术语就是“随机曲线点”）。
另外，单个区块中可以添加更多交易。Grin 区块内数据就像是一笔大交易，原始交易所有输入和输出数据都被删除。
扩展性 如上所述，由于 Mimblewimble 交易和区块格式，交易可以合并，一笔输出可以从另一笔的输入直接花费。例如，甲给乙转账，乙之后转账给丙。这一系列交易中可以去除乙的数据，乙的交易数据绝对不会在链上显示。
详细来说，区块间多数交易输出迟早都会变成另笔交易的输入。因此，所有输出花费都可以安全删除。而且假设 Grin 交易量与比特币相当，仅需几个 GB 或更少容量即可存储、下载和验证完整区块。
这就意味着 Grin 区块链可扩展用户数量，而不是交易数量。目前有个问题是：每笔交易需要保留小量数据（“内核”，大约 100 字节）。但开发团队在努力优化。
脚本 或许你听说过 Mimblewimble 协议不支持脚本 (Script)。某种程度上这是事实。但利用密码学方法，许多需要脚本的比特币合约在 Grin 上可以使用椭圆曲线密码学 (Elliptic Curve Cryptography) 实现。迄今为止已知的方法有：
 多签交易 原子交换 时间锁定交易和输出 闪电网络  发行率 比特币出块时间为 10 分钟，初始每个块奖励 50 btc，每四年减半，直到 2100 万比特币全部挖出。Grin 的货币发行率为线性增长，也就是说不会降低。目前为每 60 秒出块，每个区块奖励 60 Grin。这种发行方也有效，因为 1）稀释率逐渐为零；2）每年丢失或销毁的币数量也不小。
常见问答集 什么？没有地址？ 没有地址。Grin 交易中所有输出是单独数据，与之前的输出不共享数据。不用已知地址发送货币，取而代之的是交互式交易，两个（或更多）钱包间彼此交换数据。这种交互方式不需要双方保持同时在线。实际上，有很多方式可以在两个程序间私密安全地进行交互。也可以使用电子邮件或 Signal（或“信鸽”）来进行此种交互通讯。</description>
    </item>
    
    <item>
      <title>秘诺切换简介</title>
      <link>https://leoyoung0.github.io/posts/2020-1-05_switch_commitment_zh-cn/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://leoyoung0.github.io/posts/2020-1-05_switch_commitment_zh-cn/</guid>
      <description>本篇是本作者翻译的 Grin 文档之一。“秘诺方案”是密码学中非常重要的加密方式，也在加密货币中广泛应用。
 阅读其它语言版本： English
概述 密码学中，秘诺 （或_秘诺方案_）这个概念可以想像成一个加锁的盒子。可以在盒子里放东西（例如一张写着密码的纸），把盒子锁起来，再交给另一个人（或公示）。
另一个方不知道盒子里的密码，但是如果你决定之后按约定公开密码，并要证明这确实是最初你放在盒子里的密码（并未篡改），你仅把盒子钥匙交给另一个人即可证明。
另一个人可以打开盒子，对比盒子里的密码和你刚刚公开的密码，就可以确定盒子上锁后密码没有变更。你提前&amp;rdquo;承诺&amp;ldquo;密码，意味着在秘诺生成和公开之间，你不可以对其做任何修改。
范例 秘诺哈希计算 使用密码学哈希函数即可实现简单的秘诺方案 (commitment scheme)。例如，Alice 和 Bob 想要玩“猜数游戏”。Alice 想出自己的密数 29，由 Bob 来猜。在游戏开始前，Alice 做如下计算：
hash( 29 + r ) 并把结果告诉给 Bob。r 是随机选择的_“致盲因子 (Blinding Factor)”_。之所以需要致盲因子是因为如果没有，Bob 就可以尝试所有可能数字的哈希值，来对比原哈希值。
游戏结束时，Alice 仅需公开自己的密数 29 和盲因子 r。Bob 自己哈希计算结果，即可验证 Alice 在游戏过程中是否更改过密数。
Pedersen Commitment 另外，高阶秘诺方案还有其他特性。例如 Mimblewimble 和机密交易 (Confidential Transactions，CT) 大量使用_同态 (homomorphic)_ 秘诺的 _Pedersen Commitments_。这里的“同态”是指，引用上述“盒子”的比喻，可以使用两个加锁盒子（_盒子 1_ 和_盒子 2_），而且可以将其_“合并”_一起。这样你就得到一个大盒子（仍旧加锁），如果之后打开这个含有密数的大盒子（如上述范例），最终的结果就是_盒子 1_ 和_盒子 2_ 的密数总和。
这个“盒子”的比喻在现实世界中看似不合理，但对椭圆曲线原理无可挑剔。
如需了解关于 Pedersen Commitment 的详情，请参阅《Mimblewimble 和 Grin 简介》</description>
    </item>
    
    <item>
      <title>为何 “Commitment” 称为“秘诺”</title>
      <link>https://leoyoung0.github.io/posts/2020-1-1_commitment_english-translation/</link>
      <pubDate>Wed, 01 Jan 2020 02:27:12 +0800</pubDate>
      
      <guid>https://leoyoung0.github.io/posts/2020-1-1_commitment_english-translation/</guid>
      <description>前几天在翻译 Grin 的文档 Introduction to Switch Commitments 中出现 “Commitment Scheme”。“Commitment Scheme” 一般直接翻译为“承诺方案”。首先来看维基百科对这个词的解释。
 A way to visualize a commitment scheme is to think of a sender as putting a message in a locked box, and giving the box to a receiver. The message in the box is hidden from the receiver, who cannot open the lock themselves. Since the receiver has the box, the message inside cannot be changed—merely revealed if the sender chooses to give them the key at some later time.</description>
    </item>
    
  </channel>
</rss>